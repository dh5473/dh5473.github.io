{"version":3,"file":"a39c196d-be0744c23a13d873f9ba.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React, { FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\nimport CategoryList from 'components/Main/CategoryList'\nimport PostList from 'components/Main/PostList'\nimport { graphql, navigate } from 'gatsby'\nimport { PostListItemType } from 'types/PostItem.types'\nimport queryString, { ParsedQuery } from 'query-string'\nimport Template from 'components/Common/Template'\nimport { getAllSeries, isPostInSeries } from 'utils/seriesData'\n\ntype IndexPageProps = {\n  location: {\n    search: string\n  }\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostListItemType[]\n    }\n  }\n}\n\nconst Container = styled.div`\n  min-height: 100vh;\n  background: #ffffff;\n`\n\nconst Header = styled.header`\n  background: #ffffff;\n  border-bottom: 1px solid #f1f3f4;\n  position: sticky;\n  top: 0;\n  z-index: 100;\n`\n\nconst HeaderContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 24px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 64px;\n\n  @media (max-width: 768px) {\n    padding: 0 16px;\n    height: 56px;\n  }\n`\n\nconst Logo = styled.h1`\n  font-size: 20px;\n  font-weight: 700;\n  color: #1a1a1a;\n  margin: 0;\n\n  span {\n    color: #3182f6;\n  }\n`\n\nconst HeaderButtons = styled.div`\n  display: flex;\n  gap: 16px;\n  align-items: center;\n\n  @media (max-width: 768px) {\n    gap: 12px;\n  }\n`\n\nconst GitHubButton = styled.a`\n  background: #3182f6;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 14px;\n  font-weight: 600;\n  color: #ffffff;\n  cursor: pointer;\n  transition: all 0.2s;\n  text-decoration: none;\n  display: inline-block;\n\n  &:hover {\n    background: #2563eb;\n  }\n\n  @media (max-width: 768px) {\n    padding: 6px 12px;\n    font-size: 13px;\n  }\n`\n\nconst MainContent = styled.main`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 24px;\n\n  @media (max-width: 768px) {\n    padding: 0 16px;\n  }\n`\n\nconst ContentLayout = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 320px;\n  gap: 48px;\n  margin-top: 32px;\n\n  @media (max-width: 1024px) {\n    grid-template-columns: 1fr;\n    gap: 32px;\n  }\n\n  @media (max-width: 768px) {\n    gap: 24px;\n  }\n`\n\nconst MainSection = styled.section`\n  min-width: 0;\n`\n\nconst Sidebar = styled.aside`\n  @media (max-width: 1024px) {\n    order: -1;\n  }\n`\n\nconst SidebarSection = styled.div`\n  margin-bottom: 48px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  @media (max-width: 768px) {\n    margin-bottom: 32px;\n  }\n`\n\nconst SidebarTitle = styled.h2`\n  font-size: 18px;\n  font-weight: 700;\n  color: #1a1a1a;\n  margin: 0 0 16px 0;\n  padding-bottom: 8px;\n  border-bottom: 2px solid #3182f6;\n`\n\nconst PopularPostItem = styled.div`\n  padding: 16px 0;\n  border-bottom: 1px solid #f1f3f4;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`\n\nconst PopularPostTitle = styled.h3`\n  font-size: 14px;\n  font-weight: 600;\n  color: #1a1a1a;\n  margin: 0 0 4px 0;\n  line-height: 1.4;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n`\n\nconst SeriesItem = styled.div<{ isActive?: boolean }>`\n  padding: 16px;\n  background: ${props => (props.isActive ? '#e8f2ff' : '#f8f9fa')};\n  border: 2px solid ${props => (props.isActive ? '#3182f6' : 'transparent')};\n  border-radius: 8px;\n  margin-bottom: 12px;\n  cursor: pointer;\n  transition: all 0.2s;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  &:hover {\n    background: ${props => (props.isActive ? '#d6e9ff' : '#e9ecef')};\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  }\n`\n\nconst SeriesTitle = styled.h3`\n  font-size: 14px;\n  font-weight: 600;\n  color: #1a1a1a;\n  margin: 0 0 4px 0;\n`\n\nconst SeriesDescription = styled.p`\n  font-size: 12px;\n  color: #6b7280;\n  margin: 0 0 8px 0;\n  line-height: 1.4;\n`\n\nconst SeriesCount = styled.span`\n  font-size: 11px;\n  color: #3182f6;\n  font-weight: 500;\n`\n\nconst SeriesFilterInfo = styled.div`\n  background: #e8f2ff;\n  border: 1px solid #3182f6;\n  border-radius: 8px;\n  padding: 12px 16px;\n  margin-bottom: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\n\nconst SeriesFilterText = styled.span`\n  font-size: 14px;\n  color: #1a1a1a;\n  font-weight: 500;\n`\n\nconst SeriesFilterClear = styled.button`\n  background: none;\n  border: none;\n  color: #3182f6;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  padding: 0;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`\n\nconst HeroSection = styled.section`\n  padding: 40px 0;\n  display: flex;\n  justify-content: center;\n\n  @media (max-width: 768px) {\n    padding: 24px 0;\n  }\n`\n\nconst HeroImage = styled.img`\n  width: 100%;\n  max-width: 1200px;\n  height: 300px;\n  border-radius: 16px;\n  object-fit: cover;\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n\n  @media (max-width: 768px) {\n    height: 250px;\n    border-radius: 12px;\n  }\n`\n\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\n  location: { search },\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges },\n  },\n}) {\n  const parsed: ParsedQuery<string> = queryString.parse(search)\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category\n      ? 'All'\n      : parsed.category\n\n  const selectedSeries: string | null =\n    typeof parsed.series === 'string' ? parsed.series : null\n\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' })\n  }, [selectedCategory, selectedSeries])\n\n  // 시리즈 클릭 핸들러\n  const handleSeriesClick = (seriesId: string) => {\n    const currentParams = queryString.parse(search)\n    const newParams = {\n      ...currentParams,\n      series: selectedSeries === seriesId ? undefined : seriesId,\n      category: 'All',\n    }\n\n    const newSearch = queryString.stringify(newParams, {\n      skipNull: true,\n      skipEmptyString: true,\n    })\n    navigate(`/?${newSearch}`)\n  }\n\n  // 인기 글 임시 데이터 (실제로는 조회수나 좋아요 수를 기반으로 가져와야 함)\n  const popularPosts = edges.slice(0, 3).map(({ node }) => ({\n    title: node.frontmatter.title,\n  }))\n\n  // 시리즈 데이터 가져오기\n  const seriesList = getAllSeries()\n  const currentSeries = selectedSeries\n    ? seriesList.find(s => s.id === selectedSeries)\n    : null\n\n  // 시리즈 필터링된 글 목록\n  const filteredPosts = selectedSeries\n    ? edges.filter(({ node }) =>\n        isPostInSeries(node.fields.slug, selectedSeries),\n      )\n    : edges\n\n  return (\n    <Template\n      title={title}\n      description={description}\n      url={siteUrl}\n      image=\"/hero-image.jpg\"\n    >\n      <Container>\n        <Header>\n          <HeaderContent>\n            <Logo>\n              <span>don</span>tech\n            </Logo>\n            <HeaderButtons>\n              <GitHubButton\n                href=\"https://github.com/dh5473\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                GitHub\n              </GitHubButton>\n            </HeaderButtons>\n          </HeaderContent>\n        </Header>\n\n        <MainContent>\n          <HeroSection>\n            <HeroImage src=\"/hero-image.jpg\" alt=\"Hero Image\" />\n          </HeroSection>\n\n          <CategoryList selectedCategory={selectedCategory} />\n\n          <ContentLayout>\n            <MainSection>\n              {currentSeries && (\n                <SeriesFilterInfo>\n                  <SeriesFilterText>\n                    \"{currentSeries.title}\" 시리즈의 글을 보고 있습니다\n                  </SeriesFilterText>\n                  <SeriesFilterClear\n                    onClick={() => handleSeriesClick(selectedSeries!)}\n                  >\n                    전체 글 보기\n                  </SeriesFilterClear>\n                </SeriesFilterInfo>\n              )}\n              <PostList\n                selectedCategory={selectedCategory}\n                posts={filteredPosts}\n              />\n            </MainSection>\n\n            <Sidebar>\n              <SidebarSection>\n                <SidebarTitle>아티클 시리즈</SidebarTitle>\n                {seriesList.map(series => (\n                  <SeriesItem\n                    key={series.id}\n                    isActive={selectedSeries === series.id}\n                    onClick={() => handleSeriesClick(series.id)}\n                  >\n                    <SeriesTitle>{series.title}</SeriesTitle>\n                    <SeriesDescription>{series.description}</SeriesDescription>\n                    <SeriesCount>아티클 {series.postCount}</SeriesCount>\n                  </SeriesItem>\n                ))}\n              </SidebarSection>\n              <SidebarSection>\n                <SidebarTitle>인기있는 글</SidebarTitle>\n                {popularPosts.map((post, index) => (\n                  <PopularPostItem key={index}>\n                    <PopularPostTitle>{post.title}</PopularPostTitle>\n                  </PopularPostItem>\n                ))}\n              </SidebarSection>\n            </Sidebar>\n          </ContentLayout>\n        </MainContent>\n      </Container>\n    </Template>\n  )\n}\n\nexport default IndexPage\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: [{ frontmatter: { date: DESC } }, { frontmatter: { title: ASC } }]\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            category\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["Container","_styled","target","name","styles","Header","HeaderContent","Logo","HeaderButtons","GitHubButton","MainContent","ContentLayout","MainSection","Sidebar","SidebarSection","SidebarTitle","PopularPostItem","PopularPostTitle","SeriesItem","props","isActive","SeriesTitle","SeriesDescription","SeriesCount","SeriesFilterInfo","SeriesFilterText","SeriesFilterClear","HeroSection","HeroImage","_ref","location","search","data","site","siteMetadata","title","description","siteUrl","allMarkdownRemark","edges","parsed","queryString","parse","selectedCategory","category","selectedSeries","series","useEffect","window","scrollTo","top","behavior","handleSeriesClick","seriesId","newParams","undefined","newSearch","stringify","skipNull","skipEmptyString","navigate","popularPosts","slice","map","_ref2","node","frontmatter","seriesList","getAllSeries","currentSeries","find","s","id","filteredPosts","filter","_ref3","isPostInSeries","fields","slug","___EmotionJSX","Template","url","image","href","rel","src","alt","CategoryList","onClick","PostList","posts","key","postCount","post","index"],"sourceRoot":""}